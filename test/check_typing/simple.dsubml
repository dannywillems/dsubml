(* ---------------------------------------------------------- *)
(* Very simple example with lambda *)

(lambda(x : Nothing) x)
:
(for all(x : Nothing) Nothing);;

(lambda(x : Any) x)
:
(for all(x : Any) Any);;

(lambda(x : (for all(y : Nothing) Any)) x)
:
(Nothing -> Any) -> (Nothing -> Any);;
(* (for all(x : (for all(y : Nothing) Any)) (for all(y : Nothing) Any));; *)

(* Function taking a function and returning a function *)
(lambda(x : Nothing -> Nothing) x)
:
(Nothing -> Nothing) -> (Nothing -> Nothing);;

(* ---------------------------------------------------------- *)

(* ---------------------------------------------------------- *)
(* Example with let bindings *)
(let x = lambda(x : Nothing) x in x)
:
(for all(x : Nothing) Nothing);;

(* To use the type x.A. *)
let x : { A : Nothing .. Nothing } = { A = Nothing };;
(lambda(y : x.A) y)
:
(x.A -> x.A);;

(* Polymorphic identity *)
(let polymorphic_identity =
  lambda(x : { A : Nothing .. Any }) lambda(y : x.A) y
in polymorphic_identity)
:
(for all(x : { A : Nothing .. Any} ) (for all(y : x.A) x.A));;

(*
  With an application to { A = Nothing }. Note that to avoid the avoidance
  problem, we need to define the variable at the top level.
*)
let y : { A : Nothing .. Nothing } = { A = Nothing };;

(let polymorphic_identity =
  (lambda(x : { A : Nothing .. Any }) lambda(y : x.A) y)
in
(polymorphic_identity y))
:
y.A -> y.A;;

(*
  With an application to { A = Any }. Note that to avoid the avoidance
  problem, we need to define the variable at the top level.
*)
let y : { A : Any .. Any} = { A = Any };;

(let polymorphic_identity =
  (lambda(x : { A : Nothing .. Any }) lambda(y : x.A) y)
in
(polymorphic_identity y))
:
y.A -> y.A;;

(* -------------------------------------------------- *)
(* Simple test with SUB *)
(* Functions of type Any -> Any taking a function as parameter.
   We lost some information about the parameters in the returned type.
*)
(let f = lambda(x : Any) x in
let g = lambda(x : Nothing) x in
(f g))
:
Any;;
