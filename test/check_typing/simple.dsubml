(* ---------------------------------------------------------- *)
(* Very simple example with lambda *)

(lambda(x : Nothing) x)
:
(for all(x : Nothing) Nothing);;

(lambda(x : Any) x)
:
(for all(x : Any) Any);;

(lambda(x : (for all(y : Nothing) Any)) x)
:
(Nothing -> Any) -> (Nothing -> Any);;
(* (for all(x : (for all(y : Nothing) Any)) (for all(y : Nothing) Any));; *)
(* ---------------------------------------------------------- *)

(* ---------------------------------------------------------- *)
(* Example with let bindings *)
(let x = lambda(x : Nothing) x in x)
:
(for all(x : Nothing) Nothing);;

(* To use the type x.A. ERROR ! The type of y must be x.A but it doesn't recognize it because x is unbound. *)
let x : { A : Nothing .. Nothing } = { A = Nothing };;
(lambda(y : x.A) y)
:
(for all(y : x.A) x.A);;

(* Polymorphic identity *)
(let polymorphic_identity =
  lambda(x : { A : Nothing .. Any }) lambda(y : x.A) y
in polymorphic_identity)
:
(for all(x : { A : Nothing .. Any} ) (for all(y : x.A) x.A));;

(* With an application to { A = Nothing } *)
let y : { A : Nothing .. Nothing } = { A = Nothing };;
(let polymorphic_identity =
  (lambda(x : { A : Nothing .. Any }) lambda(y : x.A) y)
in
(polymorphic_identity y))
:
(for all(y : y.A) y.A);;

let y : { A : Any .. Any} = { A = Any };;

(let polymorphic_identity =
  (lambda(x : { A : Nothing .. Any }) lambda(y : x.A) y)
in
(polymorphic_identity y))
:
(for all(y : y.A) y.A);;

(* Parameters of type Any which is a function *)
(let f = lambda(x : Any) x in
let g = lambda(x : Nothing) x in
(f g))
:
(for all(x : Nothing) Nothing);;

(* Function returning a function *)
(* lambda(x : Any) lambda(y : Any) (x y) *)