(* ---------------------------------------------------------- *)
(* Very simple example with lambda *)

lambda(x : Nothing) x;;

lambda(x : Any) x;;

lambda(x : (for all(y : Nothing) Any)) x;;
(* ---------------------------------------------------------- *)

(* ---------------------------------------------------------- *)
(* Example with let bindings *)
let x = lambda(x : Nothing) x in x;;

(* Polymorphic identity *)
let polymorphic_identity =
  lambda(x : sig type A : Nothing .. Any end) lambda(y : x.A) y
in polymorphic_identity;;

(*
let y : { A : Nothing .. Nothing } = { A = Nothing };;

lambda(z : y.A)
let polymorphic_identity =
  (lambda(x : { A : Nothing .. Any }) lambda(y : x.A) y)
in
(polymorphic_identity z);;
*)

(* Parameters of type Any which is a function *)
(*
let f = lambda(x : Any) x in
let g = lambda(x : Nothing) x in
(f g);;
*)

(* Function returning a function *)
(* lambda(x : Any) lambda(y : Any) (x y) *)

(* This doesn't make sense because x.A is not well formed. *)
let x : Nothing = Unimplemented;;
lambda(y : x.A) y;;
