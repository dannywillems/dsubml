(* We define a module with a type which is a module type with a type between
   int.A -> string.A and Any (Top)
*)
let x = struct
  A = sig type A :> int.A -> string.A end
end;;

let f = lambda (z : x.A) z;;

(* Trying to apply to a function a module which is a subtype of the argument. *)
let y = struct type A = int.A -> string.A end;;
f y;;

(* Must fail because g is of type Any because (f y) is between int.A -> string.A
   and Any and the upper bound is selected.
let g = f y;;
g zero;;
*)

(* Try with a supertype of the lower bound of the argument. *)
let y = struct type A = int.A -> Any end;;
f y;;

(* Must fail because g is of type Any because (f y) is between int.A -> Any
   and Any and the upper bound is selected.
let g = f y;;
g zero;;
*)

let x = struct
  type A = sig
    type A = sig
      type A = int.A -> int.A
    end
  end
end;;

let y : x.A = struct
  type A = sig
    type A = int.A -> int.A
  end
end;;

let z : y.A = struct type A = int.A -> int.A end;;

let f : z.A = succ;;

f zero;;

